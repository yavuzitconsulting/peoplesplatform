{
  "address": "0xC220Ed128102d888af857d137a54b9B7573A41b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "donatedFinney",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "months",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "currentMonth",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "name": "Donated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "shareFinney",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "transferDateId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "transferFromDonationBucketPos",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "month",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        }
      ],
      "name": "RemovedFromDonationBucket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "month",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        }
      ],
      "name": "TransferedFairShare",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "up",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "months",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "currentMonth",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationBuckets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "startMonth",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "startYear",
              "type": "uint16"
            },
            {
              "internalType": "uint32[48]",
              "name": "donationBuckets",
              "type": "uint32[48]"
            }
          ],
          "internalType": "struct PeoplesPlatformFacet.DonationBuckets",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setDonatingActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setDonatingInactive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "month",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentMonth",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "up",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "currentMonth",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentYear",
          "type": "uint16"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd28cdb15e7e699966f6f9f416eb68c1d643e4983ac83f69db3f62ed262b5af9f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xC220Ed128102d888af857d137a54b9B7573A41b2",
    "transactionIndex": 0,
    "gasUsed": "1281207",
    "logsBloom": "0x
    "blockHash": "0x204859cef1763fc98cec015f3afbb2412da5b9bcb80b804cdb0ca66a990c8024",
    "transactionHash": "0xd28cdb15e7e699966f6f9f416eb68c1d643e4983ac83f69db3f62ed262b5af9f",
    "logs": [],
    "blockNumber": 524,
    "cumulativeGasUsed": "1281207",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "92e96d71970bd7921730aecd28b7bfb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"donatedFinney\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"months\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"shareFinney\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transferDateId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"transferFromDonationBucketPos\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"RemovedFromDonationBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"TransferedFairShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"months\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationBuckets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"startMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startYear\",\"type\":\"uint16\"},{\"internalType\":\"uint32[48]\",\"name\":\"donationBuckets\",\"type\":\"uint32[48]\"}],\"internalType\":\"struct PeoplesPlatformFacet.DonationBuckets\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonatingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonatingInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PeoplesPlatformFacet.sol\":\"PeoplesPlatformFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/PeoplesPlatformFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nimport {PeoplesPlatformStorage,StorageHandler} from \\\"./PeoplesPlatformStorage.sol\\\";\\nimport {UsingDiamondOwner} from \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract PeoplesPlatformFacet is StorageHandler, UsingDiamondOwner {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    \\n    event Voted(string url,bool up,string title,address receiver,address sender);\\n    event Donated(uint64 donatedFinney, string name ,uint16 months,uint16 currentMonth,uint16 currentYear);\\n    event TransferedFairShare(uint256 amount,address to,uint16 month,uint16 year);\\n    event RemovedFromDonationBucket(uint32 shareFinney,uint32 transferDateId,uint16 transferFromDonationBucketPos, uint16 month, uint16 year);\\n\\n    struct DonationBuckets{\\n        uint16 startMonth;\\n        uint16 startYear;\\n        uint32[48] donationBuckets;\\n    }\\n\\n\\n    function setDonatingActive() public onlyOwner {\\n        PeoplesPlatformStorage storage pp = pp();\\n        pp._isDonatingActive = true;\\n    }\\n\\n    function setDonatingInactive() public onlyOwner {\\n        PeoplesPlatformStorage storage pp = pp();\\n        pp._isDonatingActive = false;\\n    }\\n\\n    function donate(uint16 months, string memory name,uint16 currentMonth,uint16 currentYear) public payable {\\n        require(currentMonth > 0 && currentMonth<13, \\\"Provide currentMonth as calendar month starting with 1 and last 12\\\");\\n        uint16 currentMonth0Based = currentMonth-1;\\n        require(months < 25, \\\"Only upto 24 months is supported\\\");\\n        require(msg.value % months == 0, \\\"Payed amount must be devidable by the distributed months\\\");\\n        require(msg.value % 1_000_000_000_000_000  == 0, \\\"Less than 1 finney(1/1000 ETH) fractions are not supported\\\");\\n\\n        uint256 donatedValueInFinney = msg.value / 1_000_000_000_000_000;\\n        require(donatedValueInFinney  <= 1_000_000_000 , \\\"Donations larger than 1_000_000_000 finney are not supported\\\");\\n        uint32 perMonthValue = uint32(donatedValueInFinney / months);\\n\\n        PeoplesPlatformStorage storage pp = pp();\\n\\n        uint32 donationRelativeDateId = (currentYear*12+currentMonth0Based)-pp._startDateId;\\n\\n        //require(false,Strings.toString(donationRelativeDateId));\\n        for (uint32 i = donationRelativeDateId; i < donationRelativeDateId + months; i++) {\\n         \\n            uint32 donationBucketPos = i % 48;\\n            pp._donationBuckets[donationBucketPos]=pp._donationBuckets[donationBucketPos]+perMonthValue;\\n\\n        }\\n\\n        emit Donated(uint64(donatedValueInFinney),name, months, currentMonth, currentYear);\\n\\n    }\\n\\n    function vote(string memory url, bool up,address receiver,string memory title, uint16 currentMonth,uint16 currentYear ) public{\\n        uint160 uintAddress = uint160(receiver);\\n        if(uintAddress & uint160(0x1111000000000000000000000000000000000000) != uint160(0x1111000000000000000000000000000000000000))\\n        {\\n            uint32 voteDateId = currentYear * 12 + currentMonth;\\n            uint256 dateAddressId = (uint256(uintAddress) << 20) +voteDateId;\\n            PeoplesPlatformStorage storage pp = pp();\\n            if(!pp._dateAddressIdHasVotes[dateAddressId]){\\n                pp._dateAddressIdHasVotes[dateAddressId]=true;\\n                pp._dateAddressIdVoteValues[dateAddressId]=0;\\n                pp._dateIdAddresses[voteDateId].push(receiver);\\n            }\\n\\n            if(up){\\n                pp._dateAddressIdVoteValues[dateAddressId]++;\\n            }else{\\n                pp._dateAddressIdVoteValues[dateAddressId]--;\\n            }\\n        }\\n        emit Voted(url, up,title,receiver,msg.sender);\\n    }\\n\\n    function transfer(address payable to, uint16 month, uint16 year,uint16 currentMonth,uint16 currentYear) public {\\n       \\n        uint32 curDateId = currentYear * 12 + currentMonth;\\n        uint32 transferDateId = year * 12 + month;\\n        require(transferDateId < curDateId,\\\"Your can only transfer your share for month before the current one\\\");\\n        require(curDateId - transferDateId < 24,\\\"Your can't transfer shares more than 24 months ago.\\\");\\n        uint256 monthSenderAddressId = (uint256(uint160(msg.sender)) << 20) +transferDateId;\\n        PeoplesPlatformStorage storage pp = pp();\\n        require(pp._monthAddressHasTransfered[monthSenderAddressId]==false,\\\"Share already transfered\\\");\\n        require(pp._dateAddressIdVoteValues[monthSenderAddressId]>0,\\\"You have not enough upvotes to be eligible\\\");\\n        \\n        uint64 voteSum = 0;\\n        for (uint i=0; i<pp._dateIdAddresses[transferDateId].length; i++) {\\n            uint256 monthAddressId=(uint256( uint160(pp._dateIdAddresses[transferDateId][i])) << 20) +transferDateId;\\n            if(pp._dateAddressIdVoteValues[monthAddressId]>0){\\n                voteSum = voteSum + uint32(pp._dateAddressIdVoteValues[monthAddressId]);\\n            }\\n            \\n        }\\n        \\n        \\n        uint16 transferFromDonationBucketPos = uint16(transferDateId - pp._startDateId) % 48;\\n        uint32 shareFinney =uint32( (pp._donationBuckets[transferFromDonationBucketPos] *  uint32(pp._dateAddressIdVoteValues[monthSenderAddressId])) / (voteSum ));\\n        require(pp._donationBuckets[transferFromDonationBucketPos] >= shareFinney,\\\"Not enough donations for that months available.\\\");\\n        pp._donationBuckets[transferFromDonationBucketPos] -= shareFinney;\\n        pp._monthAddressHasTransfered[monthSenderAddressId]=true;\\n        to.transfer(shareFinney*1_000_000_000_000_000);\\n        emit TransferedFairShare(shareFinney*1_000_000_000_000_000, to,month, year);\\n        emit RemovedFromDonationBucket(shareFinney,transferDateId,transferFromDonationBucketPos, month, year);\\n    }\\n\\n    function donationBuckets() public view returns(DonationBuckets memory) {\\n        PeoplesPlatformStorage storage pp = pp();\\n        return DonationBuckets(pp._startDateId % 12 + 1,pp._startDateId / 12,pp._donationBuckets);\\n       \\n    }\\n}\\n\",\"keccak256\":\"0xa040e67365afd19e154c4efbd45f88cdb7916972b2fc417df72167793e16c8e6\",\"license\":\"MIT\"},\"contracts/PeoplesPlatformStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\n\\nbytes32 constant PEOPLESPLATFORM_STORAGE_POSITION = keccak256(\\\"peoplesplatform.contract.storage\\\");\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\n\\nstruct OwnableStorage {\\n\\n    address _owner;\\n}\\n\\nstruct PeoplesPlatformStorage {\\n    \\n\\n    bool isInitialized;\\n    bool _isDonatingActive;\\n    \\n    uint16 _startDateId;\\n\\n    uint32[48] _donationBuckets ; \\n    mapping(uint32 => address[]) _dateIdAddresses;\\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\\n    mapping(uint256 => bool) _monthAddressHasTransfered;\\n}\\n\\ncontract StorageHandler {\\n    function pp() internal pure returns (PeoplesPlatformStorage storage cs) {\\n        bytes32 position = PEOPLESPLATFORM_STORAGE_POSITION;\\n        assembly {\\n           cs.slot := position\\n        }\\n    }\\n\\n    function os() internal pure returns (OwnableStorage storage cs) {\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\n        assembly {\\n           cs.slot := position\\n        }\\n    }\\n    \\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\n        return LibDiamond.diamondStorage();\\n    }\\n}\",\"keccak256\":\"0x32e24b874f107ef63345ab5bf3dddb413ef0ccb86825ed6b057a6b0794fc7855\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611634908161001d8239f35b50600080fdfe6040608081526004361015610015575b50600080fd5b600090813560e01c80635f592bb5146100fb578063ad3337a2146100e5578063afd4e2b4146100ca578063c3269df9146100b3578063d61bcd8c146100925763db75953b14610064575061000f565b3461008e5761008a915061007736610112565b61007f611513565b90519182918261037f565b0390f35b5080fd5b503461008e576100b06100a436610304565b94939093929192610c01565b51f35b503461008e576100c236610112565b6100b0610486565b503461008e576100b06100dc366102a2565b93929092611050565b506100b06100f23661022a565b929190916108fc565b503461008e5761010a36610112565b6100b0610434565b600090600319011261000f57565b60a4359061ffff821682141561013257565b5050600080fd5b50634e487b7160e01b600052604160045260246000fd5b610600810190811067ffffffffffffffff82111761016d57604052565b610175610139565b604052565b604051906060820182811067ffffffffffffffff82111761016d57604052565b81601f820112156102225780359067ffffffffffffffff92838311610215575b60405193601f8401601f19908116603f0116850190811185821017610208575b604052828452602083830101116101ff57816000926020809301838601378301015290565b50505050600080fd5b610210610139565b6101da565b61021d610139565b6101ba565b505050600080fd5b9060806003198301126101325761ffff6004358181168114156101ff57926024359067ffffffffffffffff8211610286576102679160040161019a565b9160443582811681141561028657916064359081168114156102865790565b5050505050600080fd5b6001600160a01b038116141561000f57565b60a090600319011261000f576004356102ba81610290565b9061ffff906024358281168114156101ff579160443581811681141561028657916064358281168114156102f957916084359081168114156102f95790565b505050505050600080fd5b60c06003198201126101325767ffffffffffffffff906004358281116101ff57816103319160040161019a565b92602435801515811415610286579260443561034c81610290565b926064359182116102f9576103639160040161019a565b9060843561ffff81168114156102f9579061037c610120565b90565b91909161064081019260408061ffff92838151168552602093848201511684860152015192016000905b603082106103b75750505050565b828060019263ffffffff8751168152019401910190926103a9565b156103d957565b5060405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b61046860018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103d2565b6000805160206115d1833981519152805461ff001916610100179055565b6104ba60018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103d2565b6000805160206115d1833981519152805461ff0019169055565b156104db57565b5060405162461bcd60e51b815260206004820152604260248201527f50726f766964652063757272656e744d6f6e74682061732063616c656e64617260448201527f206d6f6e7468207374617274696e672077697468203120616e64206c61737420606482015261189960f11b608482015260a490fd5b50634e487b7160e01b600052601160045260246000fd5b61ffff166001811061057d575b6000190190565b610585610552565b610576565b61ffff918216911681811061059d570390565b6105a5610552565b0390565b156105b057565b50606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79207570746f203234206d6f6e74687320697320737570706f727465646044820152fd5b50634e487b7160e01b600052601260045260246000fd5b8115610616570690565b61061e6105f5565b0690565b1561062957565b5060405162461bcd60e51b815260206004820152603860248201527f506179656420616d6f756e74206d75737420626520646576696461626c65206260448201527f7920746865206469737472696275746564206d6f6e74687300000000000000006064820152608490fd5b1561069c57565b5060405162461bcd60e51b815260206004820152603a60248201527f4c657373207468616e20312066696e6e657928312f313030302045544829206660448201527f72616374696f6e7320617265206e6f7420737570706f727465640000000000006064820152608490fd5b8115610712570490565b61071a6105f5565b0490565b1561072557565b5060405162461bcd60e51b815260206004820152603c60248201527f446f6e6174696f6e73206c6172676572207468616e20315f3030305f3030305f60448201527f3030302066696e6e657920617265206e6f7420737570706f72746564000000006064820152608490fd5b600c9061ffff8091168091048211811515166107ab570290565b6107b3610552565b0290565b9061ffff80809316911680920381116107ce570190565b6107d6610552565b0190565b60019063ffffffff8091169081146107ce570190565b9063ffffffff80809316911680920381116107ce570190565b50634e487b7160e01b600052603260045260246000fd5b90603082101561085b575b601c8260031c7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07019260021b1690565b610863610809565b61082b565b91908251928382526000905b8482106108a1575092806020939411610894575b601f01601f1916010190565b6000838284010152610888565b90602090818082850101519082860101520190610874565b93916108e29067ffffffffffffffff60809598979316865260a0602087015260a0860190610868565b9561ffff9283809216604087015216606085015216910152565b939091929361ffff9461091b8686168015159081610a99575b506104d4565b61092485610569565b95821694610934601987106105a9565b610947610941873461060c565b15610622565b66038d7ea4c6800061095b81340615610695565b34049261096e633b9aca0085111561071e565b6109c06109b961099c61098d6109848b89610708565b63ffffffff1690565b9a61099787610791565b6107b7565b6000805160206115d18339815191525460101c61ffff169061058a565b61ffff1690565b96875b6109d0610984838b6107f0565b63ffffffff821690811015610a505791610a4761098492610a428d610a20610a1a60306109d0990692610a15610a0585610820565b905463ffffffff9160031b1c1690565b6107f0565b91610820565b90919082549060031b9163ffffffff9283811b93849216901b16911916179055565b6107da565b915091506109c3565b505050610a94939497507f6a7f8439932380592f144688013b66f9f08c6c8571bc599d1b18ceae2cf67ed3965067ffffffffffffffff9560405196879616866108b9565b0390a1565b600d91501038610915565b811981116107ce570190565b6000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0e602052604060002090565b63ffffffff166000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0d602052604060002090565b8054821015610b2d575b60005260206000200190600090565b610b35610809565b610b1e565b8054610b5d9168010000000000000000821015610b80575b600182018155610b14565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b610b88610139565b610b52565b60030b637fffffff19811461057d576000190190565b60019060030b637fffffff81146107ce570190565b9391608093610bd5610bea9398979860a0885260a0880190610868565b91151560208701528582036040870152610868565b6001600160a01b0391821660608501529416910152565b90929391610a94927fbe341f6f6a7d9bc7a1b3a4b9a8ee5c3f7c504c067b5de2fff0868cfb6e06f28d9661111160901b8084161415610c4b575b5050604051948594339386610bb8565b610c5b916109976109b992610791565b610c7a63ffffffff8216601484901b62100000600160b41b0316610aa4565b9082610cc0610cbc610cb5856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b5460ff1690565b1590565b610d2c575b50508415610d0857610cd9610d0191610ab0565b610cec610ce7825460030b90565b610ba3565b63ffffffff198254169063ffffffff16179055565b3880610c3b565b610d14610d2791610ab0565b610cec610d22825460030b90565b610b8d565b610d01565b610d94610d9992610d76610d69866000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b805460ff19166001179055565b610d8f610d8286610ab0565b805463ffffffff19169055565b610adf565b610b3a565b3882610cc5565b15610da757565b5060405162461bcd60e51b815260206004820152604260248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e7468206265666f7265207468652063757272656e74206f6064820152616e6560f01b608482015260a490fd5b63ffffffff918216911681811061059d570390565b15610e3a57565b5060405162461bcd60e51b815260206004820152603360248201527f596f75722063616e2774207472616e7366657220736861726573206d6f7265206044820152723a3430b710191a1036b7b73a34399030b3b79760691b6064820152608490fd5b15610ea357565b5060405162461bcd60e51b815260206004820152601860248201527f536861726520616c7265616479207472616e73666572656400000000000000006044820152606490fd5b15610ef057565b5060405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f7420656e6f756768207570766f74657320746f20626044820152696520656c696769626c6560b01b6064820152608490fd5b60019060001981146107ce570190565b9067ffffffffffffffff80809316911680920381116107ce570190565b63ffffffff91828092169182911692048211811515166107ab570290565b9067ffffffffffffffff809116918215610fad57160490565b610fb56105f5565b160490565b15610fc157565b5060405162461bcd60e51b815260206004820152602f60248201527f4e6f7420656e6f75676820646f6e6174696f6e7320666f722074686174206d6f60448201526e373a34399030bb30b4b630b136329760891b6064820152608490fd5b66ffffffffffffff8091168066038d7ea4c6800092048211811515166107ab570290565b506040513d6000823e3d90fd5b9361106291936109976109b992610791565b6110726109b98461099785610791565b9463ffffffff926110a06018856110998a828116976110948482168a10610da0565b610e1e565b1610610e33565b6110ad833360141b610aa4565b906110ed6110e7610cb5846000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b15610e9c565b6000956111108761110761110086610ab0565b5460030b90565b60030b13610ee9565b8695875b61111d8b610adf565b548110156111c6576111748761116f61116961115d8f6111488761114361115d93610adf565b610b14565b905460039190911b1c6001600160a01b031690565b6001600160a01b031690565b60141b90565b610aa4565b8961118a61118461110084610ab0565b60030b90565b1361119f575b5061119a90610f49565b611114565b61119a91986111b96109846109846111006111bf95610ab0565b90610f59565b9790611190565b5090929591939896978895506000805160206115d1833981519152546111f19061ffff9060101c1690565b61ffff166111ff9089610e1e565b603061ffff91909116069261121384610820565b905460039190911b1c63ffffffff1661122b89610ab0565b5460030b63ffffffff1661123e91610f76565b63ffffffff169061124e91610f94565b63ffffffff169661125e84610820565b905460039190911b1c63ffffffff1683891693849116101561127f90610fba565b61128884610820565b81548a90600383901b1c63ffffffff16906112a291610e1e565b825463ffffffff60039390931b83811b80199092169390921690911b161790556112f5906000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b805460ff191660011790556113098261101f565b869066ffffffffffffff1692878085159c610a949a7feb338d42e19428a462947fce4ff0c28c2ccae6f7ecdb16beb0dc981f98ae967c977fd60ef7047ec8bfc45d19c2ec01830d929258bf2a7ae675fde3dab44fa17f2f769f9661138297611409575b6001600160a01b03891690f1156113fc5761101f565b6040805166ffffffffffffff9290921682526001600160a01b0392909216602082015261ffff858116928201929092529085166060820152608090a16040519586958693919594909260809360a086019763ffffffff809216875216602086015261ffff9283809216604087015216606085015216910152565b611404611043565b61101f565b506108fc61136c565b60408051919060007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07845b60306007840110611457575050505061145582610150565b565b600161010060089261150785546114fc63ffffffff61147d8582851663ffffffff169052565b61149460208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c01526114ba60608285828901921c1663ffffffff169052565b6114d160808285828901921c1663ffffffff169052565b6114e860a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b0192019201919061143d565b6040516060810181811067ffffffffffffffff8211176115c3575b6040526000815260006020820152604080519161154a83610150565b610600368437015261ffff6115a6600c826000805160206115d18339815191525460101c1692818406169261fffe84116115b6575b611598600161158c61017a565b9501859061ffff169052565b04602083019061ffff169052565b6115ae611412565b604082015290565b6115be610552565b61157f565b6115cb610139565b61152e56fe033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06a3646970667358221220abdd9da655081c2354ff6137134818eed9afc9d8552fbe742d999cfb8e12e1d06c6578706572696d656e74616cf564736f6c634300080a0041",
  "deployedBytecode": "0x6040608081526004361015610015575b50600080fd5b600090813560e01c80635f592bb5146100fb578063ad3337a2146100e5578063afd4e2b4146100ca578063c3269df9146100b3578063d61bcd8c146100925763db75953b14610064575061000f565b3461008e5761008a915061007736610112565b61007f611513565b90519182918261037f565b0390f35b5080fd5b503461008e576100b06100a436610304565b94939093929192610c01565b51f35b503461008e576100c236610112565b6100b0610486565b503461008e576100b06100dc366102a2565b93929092611050565b506100b06100f23661022a565b929190916108fc565b503461008e5761010a36610112565b6100b0610434565b600090600319011261000f57565b60a4359061ffff821682141561013257565b5050600080fd5b50634e487b7160e01b600052604160045260246000fd5b610600810190811067ffffffffffffffff82111761016d57604052565b610175610139565b604052565b604051906060820182811067ffffffffffffffff82111761016d57604052565b81601f820112156102225780359067ffffffffffffffff92838311610215575b60405193601f8401601f19908116603f0116850190811185821017610208575b604052828452602083830101116101ff57816000926020809301838601378301015290565b50505050600080fd5b610210610139565b6101da565b61021d610139565b6101ba565b505050600080fd5b9060806003198301126101325761ffff6004358181168114156101ff57926024359067ffffffffffffffff8211610286576102679160040161019a565b9160443582811681141561028657916064359081168114156102865790565b5050505050600080fd5b6001600160a01b038116141561000f57565b60a090600319011261000f576004356102ba81610290565b9061ffff906024358281168114156101ff579160443581811681141561028657916064358281168114156102f957916084359081168114156102f95790565b505050505050600080fd5b60c06003198201126101325767ffffffffffffffff906004358281116101ff57816103319160040161019a565b92602435801515811415610286579260443561034c81610290565b926064359182116102f9576103639160040161019a565b9060843561ffff81168114156102f9579061037c610120565b90565b91909161064081019260408061ffff92838151168552602093848201511684860152015192016000905b603082106103b75750505050565b828060019263ffffffff8751168152019401910190926103a9565b156103d957565b5060405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b61046860018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103d2565b6000805160206115d1833981519152805461ff001916610100179055565b6104ba60018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103d2565b6000805160206115d1833981519152805461ff0019169055565b156104db57565b5060405162461bcd60e51b815260206004820152604260248201527f50726f766964652063757272656e744d6f6e74682061732063616c656e64617260448201527f206d6f6e7468207374617274696e672077697468203120616e64206c61737420606482015261189960f11b608482015260a490fd5b50634e487b7160e01b600052601160045260246000fd5b61ffff166001811061057d575b6000190190565b610585610552565b610576565b61ffff918216911681811061059d570390565b6105a5610552565b0390565b156105b057565b50606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79207570746f203234206d6f6e74687320697320737570706f727465646044820152fd5b50634e487b7160e01b600052601260045260246000fd5b8115610616570690565b61061e6105f5565b0690565b1561062957565b5060405162461bcd60e51b815260206004820152603860248201527f506179656420616d6f756e74206d75737420626520646576696461626c65206260448201527f7920746865206469737472696275746564206d6f6e74687300000000000000006064820152608490fd5b1561069c57565b5060405162461bcd60e51b815260206004820152603a60248201527f4c657373207468616e20312066696e6e657928312f313030302045544829206660448201527f72616374696f6e7320617265206e6f7420737570706f727465640000000000006064820152608490fd5b8115610712570490565b61071a6105f5565b0490565b1561072557565b5060405162461bcd60e51b815260206004820152603c60248201527f446f6e6174696f6e73206c6172676572207468616e20315f3030305f3030305f60448201527f3030302066696e6e657920617265206e6f7420737570706f72746564000000006064820152608490fd5b600c9061ffff8091168091048211811515166107ab570290565b6107b3610552565b0290565b9061ffff80809316911680920381116107ce570190565b6107d6610552565b0190565b60019063ffffffff8091169081146107ce570190565b9063ffffffff80809316911680920381116107ce570190565b50634e487b7160e01b600052603260045260246000fd5b90603082101561085b575b601c8260031c7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07019260021b1690565b610863610809565b61082b565b91908251928382526000905b8482106108a1575092806020939411610894575b601f01601f1916010190565b6000838284010152610888565b90602090818082850101519082860101520190610874565b93916108e29067ffffffffffffffff60809598979316865260a0602087015260a0860190610868565b9561ffff9283809216604087015216606085015216910152565b939091929361ffff9461091b8686168015159081610a99575b506104d4565b61092485610569565b95821694610934601987106105a9565b610947610941873461060c565b15610622565b66038d7ea4c6800061095b81340615610695565b34049261096e633b9aca0085111561071e565b6109c06109b961099c61098d6109848b89610708565b63ffffffff1690565b9a61099787610791565b6107b7565b6000805160206115d18339815191525460101c61ffff169061058a565b61ffff1690565b96875b6109d0610984838b6107f0565b63ffffffff821690811015610a505791610a4761098492610a428d610a20610a1a60306109d0990692610a15610a0585610820565b905463ffffffff9160031b1c1690565b6107f0565b91610820565b90919082549060031b9163ffffffff9283811b93849216901b16911916179055565b6107da565b915091506109c3565b505050610a94939497507f6a7f8439932380592f144688013b66f9f08c6c8571bc599d1b18ceae2cf67ed3965067ffffffffffffffff9560405196879616866108b9565b0390a1565b600d91501038610915565b811981116107ce570190565b6000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0e602052604060002090565b63ffffffff166000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0d602052604060002090565b8054821015610b2d575b60005260206000200190600090565b610b35610809565b610b1e565b8054610b5d9168010000000000000000821015610b80575b600182018155610b14565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b610b88610139565b610b52565b60030b637fffffff19811461057d576000190190565b60019060030b637fffffff81146107ce570190565b9391608093610bd5610bea9398979860a0885260a0880190610868565b91151560208701528582036040870152610868565b6001600160a01b0391821660608501529416910152565b90929391610a94927fbe341f6f6a7d9bc7a1b3a4b9a8ee5c3f7c504c067b5de2fff0868cfb6e06f28d9661111160901b8084161415610c4b575b5050604051948594339386610bb8565b610c5b916109976109b992610791565b610c7a63ffffffff8216601484901b62100000600160b41b0316610aa4565b9082610cc0610cbc610cb5856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b5460ff1690565b1590565b610d2c575b50508415610d0857610cd9610d0191610ab0565b610cec610ce7825460030b90565b610ba3565b63ffffffff198254169063ffffffff16179055565b3880610c3b565b610d14610d2791610ab0565b610cec610d22825460030b90565b610b8d565b610d01565b610d94610d9992610d76610d69866000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b805460ff19166001179055565b610d8f610d8286610ab0565b805463ffffffff19169055565b610adf565b610b3a565b3882610cc5565b15610da757565b5060405162461bcd60e51b815260206004820152604260248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e7468206265666f7265207468652063757272656e74206f6064820152616e6560f01b608482015260a490fd5b63ffffffff918216911681811061059d570390565b15610e3a57565b5060405162461bcd60e51b815260206004820152603360248201527f596f75722063616e2774207472616e7366657220736861726573206d6f7265206044820152723a3430b710191a1036b7b73a34399030b3b79760691b6064820152608490fd5b15610ea357565b5060405162461bcd60e51b815260206004820152601860248201527f536861726520616c7265616479207472616e73666572656400000000000000006044820152606490fd5b15610ef057565b5060405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f7420656e6f756768207570766f74657320746f20626044820152696520656c696769626c6560b01b6064820152608490fd5b60019060001981146107ce570190565b9067ffffffffffffffff80809316911680920381116107ce570190565b63ffffffff91828092169182911692048211811515166107ab570290565b9067ffffffffffffffff809116918215610fad57160490565b610fb56105f5565b160490565b15610fc157565b5060405162461bcd60e51b815260206004820152602f60248201527f4e6f7420656e6f75676820646f6e6174696f6e7320666f722074686174206d6f60448201526e373a34399030bb30b4b630b136329760891b6064820152608490fd5b66ffffffffffffff8091168066038d7ea4c6800092048211811515166107ab570290565b506040513d6000823e3d90fd5b9361106291936109976109b992610791565b6110726109b98461099785610791565b9463ffffffff926110a06018856110998a828116976110948482168a10610da0565b610e1e565b1610610e33565b6110ad833360141b610aa4565b906110ed6110e7610cb5846000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b15610e9c565b6000956111108761110761110086610ab0565b5460030b90565b60030b13610ee9565b8695875b61111d8b610adf565b548110156111c6576111748761116f61116961115d8f6111488761114361115d93610adf565b610b14565b905460039190911b1c6001600160a01b031690565b6001600160a01b031690565b60141b90565b610aa4565b8961118a61118461110084610ab0565b60030b90565b1361119f575b5061119a90610f49565b611114565b61119a91986111b96109846109846111006111bf95610ab0565b90610f59565b9790611190565b5090929591939896978895506000805160206115d1833981519152546111f19061ffff9060101c1690565b61ffff166111ff9089610e1e565b603061ffff91909116069261121384610820565b905460039190911b1c63ffffffff1661122b89610ab0565b5460030b63ffffffff1661123e91610f76565b63ffffffff169061124e91610f94565b63ffffffff169661125e84610820565b905460039190911b1c63ffffffff1683891693849116101561127f90610fba565b61128884610820565b81548a90600383901b1c63ffffffff16906112a291610e1e565b825463ffffffff60039390931b83811b80199092169390921690911b161790556112f5906000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b805460ff191660011790556113098261101f565b869066ffffffffffffff1692878085159c610a949a7feb338d42e19428a462947fce4ff0c28c2ccae6f7ecdb16beb0dc981f98ae967c977fd60ef7047ec8bfc45d19c2ec01830d929258bf2a7ae675fde3dab44fa17f2f769f9661138297611409575b6001600160a01b03891690f1156113fc5761101f565b6040805166ffffffffffffff9290921682526001600160a01b0392909216602082015261ffff858116928201929092529085166060820152608090a16040519586958693919594909260809360a086019763ffffffff809216875216602086015261ffff9283809216604087015216606085015216910152565b611404611043565b61101f565b506108fc61136c565b60408051919060007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07845b60306007840110611457575050505061145582610150565b565b600161010060089261150785546114fc63ffffffff61147d8582851663ffffffff169052565b61149460208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c01526114ba60608285828901921c1663ffffffff169052565b6114d160808285828901921c1663ffffffff169052565b6114e860a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b0192019201919061143d565b6040516060810181811067ffffffffffffffff8211176115c3575b6040526000815260006020820152604080519161154a83610150565b610600368437015261ffff6115a6600c826000805160206115d18339815191525460101c1692818406169261fffe84116115b6575b611598600161158c61017a565b9501859061ffff169052565b04602083019061ffff169052565b6115ae611412565b604082015290565b6115be610552565b61157f565b6115cb610139565b61152e56fe033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06a3646970667358221220abdd9da655081c2354ff6137134818eed9afc9d8552fbe742d999cfb8e12e1d06c6578706572696d656e74616cf564736f6c634300080a0041",
  "devdoc": {
    "details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}